package de.swiesend.secretservice.functional.interfaces;

import java.util.List;
import java.util.Map;
import java.util.Optional;

public interface CollectionInterface extends AutoCloseable {

    boolean clear();

    /**
     * Create an item in the collection.
     *
     * @param label         The label is a description. It is not a unique identifier.
     *
     * @param secret        The secret to be stored. One can encrypt the secret in beforehand,
     *                      to avoid unwanted access from malicious applications.
     *
     * @return item path, which is a unique reference generated by the provider
     */
    Optional<String> createItem(String label, CharSequence secret);

    /**
     * Create an item in the collection.
     *
     * @param label         The label is a description. It is not a unique identifier.
     *
     * @param secret        The secret to be stored. One can encrypt the secret in beforehand,
     *                      to avoid unwanted access from malicious applications.
     *
     * @param attributes    Attributes are provided as a mapping of custom keys and values.
     *                      Applications often identify their secrets using the key `application`
     *                      and their application name as value and providing a unique identifier
     *                      for a specific secret in order to find it by its attributes instead
     *                      of the generated item path.
     *
     *                      e.g.:
     *                      <code>
     *                          {
     *                              "application": "APPLICATION_NAME",
     *                              "uuid": "f773dd93-4869-4897-be9d-c53f5b43f904"
     *                          }
     *                      </code>
     *
     * @return item path, which is a unique reference generated by the provider
     */
    Optional<String> createItem(String label, CharSequence secret, Map<String, String> attributes);

    boolean delete();

    boolean deleteItem(String objectPath);

    boolean deleteItems(List<String> objectPaths);

    Optional<Map<String, String>> getAttributes(String objectPath);

    Optional<List<String>> getItems(Map<String, String> attributes);

    Optional<String> getItemLabel(String objectPath);

    boolean setItemLabel(String objectPath, String label);

    boolean setLabel(String label);

    Optional<String> getLabel();

    Optional<String> getId();

    Optional<char[]> getSecret(String objectPath);

    Optional<Map<String, char[]>> getSecrets();

    boolean isLocked();

    boolean lock();

    boolean unlockWithUserPermission();

    boolean updateItem(String objectPath, String label, CharSequence password, Map<String, String> attributes);

}
